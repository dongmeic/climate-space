# Gets degree days for a given temperature threshold and date range.  
#   NOTE: NA values will be omitted.
# @param daily.means: numeric vector: mean daily temperatures
# @param threshold: numeric scalar: temperature threshold
# @param day.range: either 'all' or 'aug.jun'
# @return: numeric scalar = sum of degrees above threshold for all days

get.degree.days <- function(daily.means, threshold, day.range='all', ...) {
  if (!(day.range %in% c('all', 'aug.jun'))) {
    stop('day.range can only be "all" or "aug.jun"')
  }
  n <- length(daily.means)
  if (day.range == 'aug.jun') daily.means <- daily.means[1:(n - 31)]
  
<<<<<<< HEAD
  days.above.threshold <- daily.means[daily.means > threshold]
  sum(days.above.threshold - threshold, na.rm=T)
}


# Test
#daily.means <- c(0, 0, 0, 10, 20, 30, 0)
#get.degree.days(daily.means, 0)  # should be 60
#get.degree.days(daily.means, 10) # should be 30
#get.degree.days(daily.means, 20) # should be 10
#get.degree.days(daily.means, 30) # should be 0

#daily.means <- rnorm(365, mean=15, sd=10)
#get.degree.days(daily.means, threshold=5.5)
#get.degree.days(daily.means, threshold=5.5, day.range='aug.jun') #should be less



=======
  days.above.threshold <- round(daily.means[daily.means > threshold] - threshold - 0.5)
  sum(days.above.threshold, na.rm=T)
}

>>>>>>> 1ebd4b74d35bc6880b571007049fb1021c7a2911
# Get degree days for all thresholds and date ranges given
get.degree.days.for.all.thresholds <- function(
    daily.means, thresholds, day.ranges) {
  if (length(thresholds) != length(day.ranges)) {
    stop('"thresholds" and "day.ranges" must have same length')
  }
  out <- numeric(length(thresholds))
  for (i in 1:length(thresholds)) {
  	out[i] <- get.degree.days(daily.means, thresholds[i], day.ranges[i])
  }
  names(out) <- paste0("thres",thresholds, day.ranges)
  out
}

# Test
daily.means <- rnorm(365, mean=10, sd=10)
thresholds <- c(2.2,   5.5,   10,    15,    5.5)
day.ranges <- c('all', 'all', 'all', 'all', 'aug.jun')
get.degree.days.for.all.thresholds(daily.means, thresholds, day.ranges)
